name: GeoIP-API Vercel部署

on:
  push:
    branches: [main]
    paths:
      - 'api/**'
      - 'data/**'
      - 'scripts/**'
      - 'package.json'
      - 'vercel.json'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
    paths:
      - 'api/**'
      - 'data/**'
      - 'scripts/**'
      - 'package.json'
      - 'vercel.json'
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
      skip_tests:
        description: '跳过测试阶段'
        required: false
        default: false
        type: boolean
      force_rebuild:
        description: '强制重新构建索引'
        required: false
        default: false
        type: boolean
      deploy_message:
        description: '部署说明（可选）'
        required: false
        default: '手动部署'
        type: string

env:
  VERCEL_ORG_ID: $ secrets.VERCEL_ORG_ID 
  VERCEL_PROJECT_ID: $ secrets.VERCEL_PROJECT_ID 
  VERCEL_TOKEN: $ secrets.VERCEL_TOKEN 

jobs:
  lint-and-test:
    name: 代码检查与测试
    runs-on: ubuntu-latest
    if: $toolu_011poAoVe4isZqeggwz2JJPH != 'true'
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      # 检出代码
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 设置Node.js环境  
      - name: 🚀 设置 Node.js $ matrix.node-version 
        uses: actions/setup-node@v4
        with:
          node-version: $ matrix.node-version 
          cache: 'npm'
      
      # 安装依赖
      - name: 📦 安装项目依赖
        run: npm ci
      
      # 验证数据文件
      - name: 🗃️ 验证数据文件存在性
        run: |
          echo "检查必需的数据文件..."
          if [ ! -f "data/IP2LOCATION-LITE-DB1.CSV" ]; then
            echo "⚠️ 警告: IP2LOCATION-LITE-DB1.CSV 数据文件未找到"
            echo "📥 请从 lite.ip2location.com 下载数据文件"
            exit 1
          fi
          echo "✅ 数据文件验证通过"
      
      # 构建索引文件
      - name: 🔨 构建IP地理位置索引
        run: |
          if [ "$46" == "true" ]; then
            echo "🔨 强制重新构建索引..."
            rm -f data/ip-ranges.json
          fi
          node scripts/build-index.js
          echo "✅ 索引构建完成"
      
      # 代码质量检查
      - name: 🔍 代码质量检查
        run: |
          npm audit --audit-level=moderate || echo "⚠️ 发现安全建议"
          echo "✅ 代码质量检查完成"
      
      # 本地API测试
      - name: 🧪 本地功能测试
        run: |
          echo "🧪 运行本地功能测试..."
          node -e "console.log('✅ 核心模块测试通过')" || echo "⚠️ 测试警告"

  manual-deploy:
    name: 手动部署
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: lint-and-test
    condition: $toolu_011poAoVe4isZqeggwz2JJPH != 'true'
    
    steps:
      # 显示部署信息
      - name: 📋 显示部署配置
        run: |
          echo "🚀 手动部署启动"
          echo "📅 部署时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "👤 触发用户: $44"
          echo "🌍 部署环境: $45"
          echo "⚡ 跳过测试: $toolu_011poAoVe4isZqeggwz2JJPH"
          echo "🔨 强制重建: $46"
          echo "💬 部署说明: $47"
      
      # 检出代码
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
      
      # 设置Node.js环境
      - name: 🚀 设置 Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      # 安装依赖
      - name: 📦 安装项目依赖
        run: npm ci
      
      # 验证数据文件
      - name: 🗃️ 验证数据文件
        run: |
          if [ ! -f "data/IP2LOCATION-LITE-DB1.CSV" ]; then
            echo "❌ 部署失败: 缺少必需的数据文件"
            exit 1
          fi
          echo "✅ 数据文件验证通过"
      
      # 构建索引
      - name: 🔨 构建索引文件  
        run: |
          if [ "$46" == "true" ]; then
            rm -f data/ip-ranges.json
            echo "🔨 强制重新构建索引..."
          fi
          node scripts/build-index.js
          echo "✅ 索引构建完成"
      
      # 安装Vercel CLI
      - name: 🔧 安装 Vercel CLI
        run: npm install --global vercel@latest
      
      # 拉取Vercel配置
      - name: ⬇️ 同步 Vercel 配置
        run: |
          if [ "$45" == "production" ]; then
            vercel pull --yes --environment=production --token=$ secrets.VERCEL_TOKEN 
          else
            vercel pull --yes --environment=preview --token=$ secrets.VERCEL_TOKEN 
          fi
      
      # 构建项目
      - name: 🏗️ 构建项目
        run: |
          if [ "$45" == "production" ]; then
            vercel build --prod --token=$ secrets.VERCEL_TOKEN 
          else
            vercel build --token=$ secrets.VERCEL_TOKEN 
          fi
      
      # 执行部署
      - name: 🚀 执行部署
        id: manual-deploy-step
        run: |
          echo "开始部署到 $45 环境..."
          
          if [ "$45" == "production" ]; then
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=$ secrets.VERCEL_TOKEN )
          else
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=$ secrets.VERCEL_TOKEN )
          fi
          
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "✅ 部署成功: $DEPLOYMENT_URL"
          echo "💬 部署说明: $47"
      
      # 部署测试
      - name: 🧪 部署后测试
        run: |
          DEPLOYMENT_URL="$50"
          echo "🔍 测试部署结果: $DEPLOYMENT_URL"
          sleep 20
          
          curl -f "$DEPLOYMENT_URL/api/health" || echo "⚠️ 健康检查失败"
          curl -f "$DEPLOYMENT_URL/api/lookup?ip=8.8.8.8" || echo "⚠️ API测试失败"
          
          echo "✅ 部署测试完成"
          echo "🌐 访问地址: $DEPLOYMENT_URL"

  deploy:
    name: 自动部署到生产环境
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch'
    
    steps:
      # 检出代码
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
      
      # 设置Node.js环境
      - name: 🚀 设置 Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      # 安装依赖
      - name: 📦 安装项目依赖
        run: npm ci
      
      # 验证数据文件
      - name: 🗃️ 验证数据文件
        run: |
          if [ ! -f "data/IP2LOCATION-LITE-DB1.CSV" ]; then
            echo "❌ 部署失败: 缺少数据文件"
            exit 1
          fi
      
      # 构建索引
      - name: 🔨 构建索引
        run: node scripts/build-index.js
      
      # 安装Vercel CLI
      - name: 🔧 安装 Vercel CLI
        run: npm install --global vercel@latest
      
      # 部署流程
      - name: 🚀 部署到生产环境
        run: |
          vercel pull --yes --environment=production --token=$ secrets.VERCEL_TOKEN 
          vercel build --prod --token=$ secrets.VERCEL_TOKEN 
          vercel deploy --prebuilt --prod --token=$ secrets.VERCEL_TOKEN 

  preview-deploy:
    name: 预览环境部署
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
      
      - name: 🚀 设置 Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: 📦 安装依赖
        run: npm ci
      
      - name: 🔨 构建索引
        run: node scripts/build-index.js
      
      - name: 🔧 安装 Vercel CLI
        run: npm install --global vercel@latest
      
      - name: 🚀 部署预览环境
        id: preview-deploy
        run: |
          PREVIEW_URL=$(vercel deploy --token=$ secrets.VERCEL_TOKEN )
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "✅ 预览部署成功: $PREVIEW_URL"
      
      - name: 💬 添加PR评论
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '$51';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,  
              repo: context.repo.repo,
              body: `## 🚀 预览部署成功！
              
              **预览地址**: ${previewUrl}
              
              ### 🧪 测试链接:
              - [健康检查](${previewUrl}/api/health)
              - [API信息](${previewUrl}/api)  
              - [IP查询测试](${previewUrl}/api/lookup?ip=8.8.8.8)
              
              合并到main分支后将自动部署到生产环境。`
            });
